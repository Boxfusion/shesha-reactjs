/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

/**
 * Form DTO
 */
export interface FormDto {
  id?: string;
  /**
   * Form path/id is used to identify a form
   */
  path?: string | null;
  /**
   * Form name
   */
  name?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Form markup (components) in JSON format
   */
  markup?: string | null;
  /**
   * Type of the form model
   */
  modelType?: string | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface FormDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: FormDto;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

/**
 * Form DTO
 */
export interface FormUpdateMarkupInput {
  id?: string;
  /**
   * Form markup (components) in JSON format
   */
  markup?: string | null;
}

export interface FormGetQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormGetProps = Omit<GetProps<FormDtoAjaxResponse, AjaxResponseBase, FormGetQueryParams>, 'path'> & {
  id: string;
};

/**
 * Get form
 */
export const FormGet = ({ id, ...props }: FormGetProps) => (
  <Get<FormDtoAjaxResponse, AjaxResponseBase, FormGetQueryParams> path={`/api/services/Forms/${id}`} {...props} />
);

export type UseFormGetProps = Omit<UseGetProps<FormDtoAjaxResponse, FormGetQueryParams>, 'path'> & { id: string };

/**
 * Get form
 */
export const useFormGet = ({ id, ...props }: UseFormGetProps) =>
  useGet<FormDtoAjaxResponse, AjaxResponseBase, FormGetQueryParams>(`/api/services/Forms/${id}`, props);

export interface FormGetByPathQueryParams {
  path?: string | null;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormGetByPathProps = Omit<
  GetProps<FormDtoAjaxResponse, AjaxResponseBase, FormGetByPathQueryParams>,
  'path'
>;

/**
 * Get form by path
 */
export const FormGetByPath = (props: FormGetByPathProps) => (
  <Get<FormDtoAjaxResponse, AjaxResponseBase, FormGetByPathQueryParams> path={`/api/services/Forms`} {...props} />
);

export type UseFormGetByPathProps = Omit<UseGetProps<FormDtoAjaxResponse, FormGetByPathQueryParams>, 'path'>;

/**
 * Get form by path
 */
export const useFormGetByPath = (props: UseFormGetByPathProps) =>
  useGet<FormDtoAjaxResponse, AjaxResponseBase, FormGetByPathQueryParams>(`/api/services/Forms`, props);

export interface FormUpdateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormUpdateProps = Omit<
  MutateProps<FormDtoAjaxResponse, AjaxResponseBase, FormUpdateQueryParams, FormDto>,
  'path' | 'verb'
>;

/**
 * Update form
 */
export const FormUpdate = (props: FormUpdateProps) => (
  <Mutate<FormDtoAjaxResponse, AjaxResponseBase, FormUpdateQueryParams, FormDto>
    verb="PUT"
    path={`/api/services/Forms`}
    {...props}
  />
);

export type UseFormUpdateProps = Omit<
  UseMutateProps<FormDtoAjaxResponse, FormUpdateQueryParams, FormDto>,
  'path' | 'verb'
>;

/**
 * Update form
 */
export const useFormUpdate = (props: UseFormUpdateProps) =>
  useMutate<FormDtoAjaxResponse, AjaxResponseBase, FormUpdateQueryParams, FormDto>('PUT', `/api/services/Forms`, props);

export interface FormCreateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormCreateProps = Omit<
  MutateProps<FormDtoAjaxResponse, AjaxResponseBase, FormCreateQueryParams, FormDto>,
  'path' | 'verb'
>;

/**
 * Create new form
 */
export const FormCreate = (props: FormCreateProps) => (
  <Mutate<FormDtoAjaxResponse, AjaxResponseBase, FormCreateQueryParams, FormDto>
    verb="POST"
    path={`/api/services/Forms`}
    {...props}
  />
);

export type UseFormCreateProps = Omit<
  UseMutateProps<FormDtoAjaxResponse, FormCreateQueryParams, FormDto>,
  'path' | 'verb'
>;

/**
 * Create new form
 */
export const useFormCreate = (props: UseFormCreateProps) =>
  useMutate<FormDtoAjaxResponse, AjaxResponseBase, FormCreateQueryParams, FormDto>(
    'POST',
    `/api/services/Forms`,
    props
  );

export interface FormUpdateMarkupQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormUpdateMarkupProps = Omit<
  MutateProps<void, unknown, FormUpdateMarkupQueryParams, FormUpdateMarkupInput>,
  'path' | 'verb'
> & { id: string };

/**
 * Update form markup
 */
export const FormUpdateMarkup = ({ id, ...props }: FormUpdateMarkupProps) => (
  <Mutate<void, unknown, FormUpdateMarkupQueryParams, FormUpdateMarkupInput>
    verb="PUT"
    path={`/api/services/Forms/${id}/Markup`}
    {...props}
  />
);

export type UseFormUpdateMarkupProps = Omit<
  UseMutateProps<void, FormUpdateMarkupQueryParams, FormUpdateMarkupInput>,
  'path' | 'verb'
> & { id: string };

/**
 * Update form markup
 */
export const useFormUpdateMarkup = ({ id, ...props }: UseFormUpdateMarkupProps) =>
  useMutate<void, unknown, FormUpdateMarkupQueryParams, FormUpdateMarkupInput>(
    'PUT',
    `/api/services/Forms/${id}/Markup`,
    props
  );
