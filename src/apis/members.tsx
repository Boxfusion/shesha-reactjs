/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export interface UserToken {
  id?: number;
  tenantId?: number | null;
  userId?: number;
  loginProvider?: string | null;
  name?: string | null;
  value?: string | null;
  expireDate?: string | null;
}

export interface UserLogin {
  id?: number;
  tenantId?: number | null;
  userId?: number;
  loginProvider: string;
  providerKey: string;
}

export interface UserRole {
  id?: number;
  creationTime?: string;
  creatorUserId?: number | null;
  tenantId?: number | null;
  userId?: number;
  roleId?: number;
}

export interface UserClaim {
  id?: number;
  creationTime?: string;
  creatorUserId?: number | null;
  tenantId?: number | null;
  userId?: number;
  claimType?: string | null;
  claimValue?: string | null;
}

export interface UserPermissionSetting {
  id?: number;
  creationTime?: string;
  creatorUserId?: number | null;
  tenantId?: number | null;
  name: string;
  isGranted?: boolean;
  userId?: number;
}

export interface Setting {
  id?: number;
  creationTime?: string;
  creatorUserId?: number | null;
  lastModificationTime?: string | null;
  lastModifierUserId?: number | null;
  tenantId?: number | null;
  userId?: number | null;
  name: string;
  value?: string | null;
}

export interface User {
  id?: number;
  creationTime?: string;
  creatorUserId?: number | null;
  lastModificationTime?: string | null;
  lastModifierUserId?: number | null;
  isDeleted?: boolean;
  deleterUserId?: number | null;
  deletionTime?: string | null;
  authenticationSource?: string | null;
  userName: string;
  tenantId?: number | null;
  name: string;
  surname: string;
  fullName?: string | null;
  password: string;
  emailConfirmationCode?: string | null;
  passwordResetCode?: string | null;
  lockoutEndDateUtc?: string | null;
  accessFailedCount?: number;
  isLockoutEnabled?: boolean;
  phoneNumber?: string | null;
  isPhoneNumberConfirmed?: boolean;
  securityStamp?: string | null;
  isTwoFactorEnabled?: boolean;
  logins?: UserLogin[] | null;
  roles?: UserRole[] | null;
  claims?: UserClaim[] | null;
  permissions?: UserPermissionSetting[] | null;
  settings?: Setting[] | null;
  isEmailConfirmed?: boolean;
  isActive?: boolean;
  normalizedUserName: string;
  normalizedEmailAddress: string;
  concurrencyStamp?: string | null;
  tokens?: UserToken[] | null;
  deleterUser?: User;
  creatorUser?: User;
  lastModifierUser?: User;
  lastLoginDate?: string | null;
  emailAddress?: string | null;
}

export interface StoredFileDto {
  error?: string | null;
  id?: string | null;
  name?: string | null;
  fileCategory?: number | null;
  url?: string | null;
  size?: number;
  type?: string | null;
}

export interface GuidNullableEntityWithDisplayNameDto {
  id?: string | null;
  displayText?: string | null;
}

export interface ReferenceListItemValueDto {
  item?: string | null;
  itemValue?: number | null;
}

export interface MemberResponse {
  id?: string;
  name?: string | null;
  surname?: string | null;
  idNumber?: string | null;
  cellphone?: string | null;
  supportingDoc?: StoredFileDto;
  email?: string | null;
  membershipNumber?: string | null;
  residentialAddress?: string | null;
  province?: GuidNullableEntityWithDisplayNameDto;
  region?: GuidNullableEntityWithDisplayNameDto;
  branch?: GuidNullableEntityWithDisplayNameDto;
  membershipStatus?: ReferenceListItemValueDto;
  membershipStartDate?: string | null;
  membershipEndDate?: string | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface MemberResponseAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: MemberResponse;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface MemberResponsePagedResultDto {
  items?: MemberResponse[] | null;
  totalCount?: number;
}

export interface MemberResponsePagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: MemberResponsePagedResultDto;
}

export interface MembersCreateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type MembersCreateProps = Omit<
  MutateProps<MemberResponseAjaxResponse, AjaxResponseBase, MembersCreateQueryParams, void>,
  'path' | 'verb'
>;

export const MembersCreate = (props: MembersCreateProps) => (
  <Mutate<MemberResponseAjaxResponse, AjaxResponseBase, MembersCreateQueryParams, void>
    verb="POST"
    path={`/api/services/Gma/Members/Create`}
    {...props}
  />
);

export type UseMembersCreateProps = Omit<
  UseMutateProps<MemberResponseAjaxResponse, MembersCreateQueryParams, void>,
  'path' | 'verb'
>;

export const useMembersCreate = (props: UseMembersCreateProps) =>
  useMutate<MemberResponseAjaxResponse, AjaxResponseBase, MembersCreateQueryParams, void>(
    'POST',
    `/api/services/Gma/Members/Create`,
    props
  );

export interface MembersUpdateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type MembersUpdateProps = Omit<
  MutateProps<MemberResponseAjaxResponse, AjaxResponseBase, MembersUpdateQueryParams, void>,
  'path' | 'verb'
>;

export const MembersUpdate = (props: MembersUpdateProps) => (
  <Mutate<MemberResponseAjaxResponse, AjaxResponseBase, MembersUpdateQueryParams, void>
    verb="PUT"
    path={`/api/services/Gma/Members/Update`}
    {...props}
  />
);

export type UseMembersUpdateProps = Omit<
  UseMutateProps<MemberResponseAjaxResponse, MembersUpdateQueryParams, void>,
  'path' | 'verb'
>;

export const useMembersUpdate = (props: UseMembersUpdateProps) =>
  useMutate<MemberResponseAjaxResponse, AjaxResponseBase, MembersUpdateQueryParams, void>(
    'PUT',
    `/api/services/Gma/Members/Update`,
    props
  );

export interface MembersSuspendQueryParams {
  memberId?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type MembersSuspendProps = Omit<
  MutateProps<MemberResponseAjaxResponse, AjaxResponseBase, MembersSuspendQueryParams, void>,
  'path' | 'verb'
>;

export const MembersSuspend = (props: MembersSuspendProps) => (
  <Mutate<MemberResponseAjaxResponse, AjaxResponseBase, MembersSuspendQueryParams, void>
    verb="POST"
    path={`/api/services/Gma/Members/Suspend`}
    {...props}
  />
);

export type UseMembersSuspendProps = Omit<
  UseMutateProps<MemberResponseAjaxResponse, MembersSuspendQueryParams, void>,
  'path' | 'verb'
>;

export const useMembersSuspend = (props: UseMembersSuspendProps) =>
  useMutate<MemberResponseAjaxResponse, AjaxResponseBase, MembersSuspendQueryParams, void>(
    'POST',
    `/api/services/Gma/Members/Suspend`,
    props
  );

export interface MembersCancelQueryParams {
  memberId?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type MembersCancelProps = Omit<
  MutateProps<MemberResponseAjaxResponse, AjaxResponseBase, MembersCancelQueryParams, void>,
  'path' | 'verb'
>;

export const MembersCancel = (props: MembersCancelProps) => (
  <Mutate<MemberResponseAjaxResponse, AjaxResponseBase, MembersCancelQueryParams, void>
    verb="POST"
    path={`/api/services/Gma/Members/Cancel`}
    {...props}
  />
);

export type UseMembersCancelProps = Omit<
  UseMutateProps<MemberResponseAjaxResponse, MembersCancelQueryParams, void>,
  'path' | 'verb'
>;

export const useMembersCancel = (props: UseMembersCancelProps) =>
  useMutate<MemberResponseAjaxResponse, AjaxResponseBase, MembersCancelQueryParams, void>(
    'POST',
    `/api/services/Gma/Members/Cancel`,
    props
  );

export interface MembersActivateQueryParams {
  memberId?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type MembersActivateProps = Omit<
  MutateProps<MemberResponseAjaxResponse, AjaxResponseBase, MembersActivateQueryParams, void>,
  'path' | 'verb'
>;

export const MembersActivate = (props: MembersActivateProps) => (
  <Mutate<MemberResponseAjaxResponse, AjaxResponseBase, MembersActivateQueryParams, void>
    verb="POST"
    path={`/api/services/Gma/Members/Activate`}
    {...props}
  />
);

export type UseMembersActivateProps = Omit<
  UseMutateProps<MemberResponseAjaxResponse, MembersActivateQueryParams, void>,
  'path' | 'verb'
>;

export const useMembersActivate = (props: UseMembersActivateProps) =>
  useMutate<MemberResponseAjaxResponse, AjaxResponseBase, MembersActivateQueryParams, void>(
    'POST',
    `/api/services/Gma/Members/Activate`,
    props
  );

export interface MembersGetQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type MembersGetProps = Omit<
  GetProps<MemberResponseAjaxResponse, AjaxResponseBase, MembersGetQueryParams>,
  'path'
>;

export const MembersGet = (props: MembersGetProps) => (
  <Get<MemberResponseAjaxResponse, AjaxResponseBase, MembersGetQueryParams>
    path={`/api/services/Gma/Members/Get`}
    {...props}
  />
);

export type UseMembersGetProps = Omit<UseGetProps<MemberResponseAjaxResponse, MembersGetQueryParams>, 'path'>;

export const useMembersGet = (props: UseMembersGetProps) =>
  useGet<MemberResponseAjaxResponse, AjaxResponseBase, MembersGetQueryParams>(`/api/services/Gma/Members/Get`, props);

export interface MembersGetAllQueryParams {
  name?: string | null;
  surname?: string | null;
  idNumber?: string | null;
  cellphone?: string | null;
  'supportingDoc.error'?: string | null;
  'supportingDoc.id'?: string | null;
  'supportingDoc.name'?: string | null;
  'supportingDoc.fileCategory'?: number | null;
  'supportingDoc.url'?: string | null;
  'supportingDoc.size'?: number;
  'supportingDoc.type'?: string | null;
  email?: string | null;
  membershipNumber?: string | null;
  residentialAddress?: string | null;
  'province.displayText'?: string | null;
  'province.id'?: string | null;
  'region.displayText'?: string | null;
  'region.id'?: string | null;
  'branch.displayText'?: string | null;
  'branch.id'?: string | null;
  'membershipStatus.item'?: string | null;
  'membershipStatus.itemValue'?: number | null;
  membershipStartDate?: string | null;
  membershipEndDate?: string | null;
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type MembersGetAllProps = Omit<
  GetProps<MemberResponsePagedResultDtoAjaxResponse, AjaxResponseBase, MembersGetAllQueryParams>,
  'path'
>;

export const MembersGetAll = (props: MembersGetAllProps) => (
  <Get<MemberResponsePagedResultDtoAjaxResponse, AjaxResponseBase, MembersGetAllQueryParams>
    path={`/api/services/Gma/Members/GetAll`}
    {...props}
  />
);

export type UseMembersGetAllProps = Omit<
  UseGetProps<MemberResponsePagedResultDtoAjaxResponse, MembersGetAllQueryParams>,
  'path'
>;

export const useMembersGetAll = (props: UseMembersGetAllProps) =>
  useGet<MemberResponsePagedResultDtoAjaxResponse, AjaxResponseBase, MembersGetAllQueryParams>(
    `/api/services/Gma/Members/GetAll`,
    props
  );

export interface MembersDeleteQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type MembersDeleteProps = Omit<MutateProps<void, unknown, MembersDeleteQueryParams, void>, 'path' | 'verb'>;

export const MembersDelete = (props: MembersDeleteProps) => (
  <Mutate<void, unknown, MembersDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/services/Gma/Members/Delete`}
    {...props}
  />
);

export type UseMembersDeleteProps = Omit<UseMutateProps<void, MembersDeleteQueryParams, void>, 'path' | 'verb'>;

export const useMembersDelete = (props: UseMembersDeleteProps) =>
  useMutate<void, unknown, MembersDeleteQueryParams, void>('DELETE', `/api/services/Gma/Members/Delete`, props);
