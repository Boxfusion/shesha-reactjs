/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export type ListSortDirection = number;

/**
 * Datatable column DTO
 */
export interface DataTableColumnDto {
  /**
   * Name of the property in the model
   */
  propertyName?: string | null;
  /**
   * Filter caption
   */
  filterCaption?: string | null;
  /**
   * Column name
   */
  name?: string | null;
  /**
   * Caption
   */
  caption?: string | null;
  allowShowHide?: boolean;
  /**
   * Data type
   */
  dataType?: string | null;
  /**
   * Custom data type
   */
  customDataType?: string | null;
  /**
   * Reference list name
   */
  referenceListName?: string | null;
  /**
   * Reference list namespace
   */
  referenceListNamespace?: string | null;
  /**
   * Entity type short alias
   */
  entityReferenceTypeShortAlias?: string | null;
  /**
   * Autocomplete url
   */
  autocompleteUrl?: string | null;
  /**
   * Allow selection of inherited entities, is used in pair with <seealso cref="P:Shesha.Web.DataTable.Model.DataTableColumnDto.AutocompleteUrl" />
   */
  allowInherited?: boolean;
  /**
   * Indicates is column visible or not
   */
  isVisible?: boolean;
  /**
   * Indicates is column filterable or not
   */
  isFilterable?: boolean;
  /**
   * Indicates is column sortable or not
   */
  isSortable?: boolean;
  /**
   * Column width
   */
  width?: string | null;
  defaultSorting?: ListSortDirection;
  /**
   * Indicates is column hidden by default or not
   */
  isHiddenByDefault?: boolean;
  /**
   * Indicates is column hidden by default or not
   */
  hiddenByDefault?: boolean;
  /**
   * Indicates is column visible or not
   */
  visible?: boolean;
}

/**
 * Stored filter data contract
 */
export interface DataTableStoredFilterDto {
  /**
   * Filter ID
   */
  id: string;
  /**
   * Display name of the stored filter
   */
  name: string;
  /**
   * Only one exclusive filter can be applied at a time
   */
  isExclusive?: boolean;
  /**
   * Private filters are managed within the datatable control
   */
  isPrivate?: boolean;
  /**
   * Filter expression type (HQL / JsonLogic / Column / Composite / Code filter)
   */
  expressionType?: string | null;
  /**
   * Expression that defines the filter
   */
  expression?: string | null;
}

/**
 * Datatable configuration DTO
 */
export interface DataTableConfigDto {
  /**
   * Unique identifier of the configuration
   */
  id?: string | null;
  /**
   * Default page size
   */
  pageSize?: number;
  /**
   * Columns
   */
  columns?: DataTableColumnDto[] | null;
  /**
   * Stored filters
   */
  storedFilters?: DataTableStoredFilterDto[] | null;
  /**
   * Create url
   */
  createUrl?: string | null;
  /**
   * Details url
   */
  detailsUrl?: string | null;
  /**
   * Update url
   */
  updateUrl?: string | null;
  /**
   * Delete url
   */
  deleteUrl?: string | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface DataTableConfigDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: DataTableConfigDto;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface ColumnSortingDto {
  id?: string | null;
  desc?: boolean;
}

/**
 * Columns filter DTO
 */
export interface ColumnFilterDto {
  /**
   * Column identifier
   */
  columnId?: string | null;
  /**
   * Filter options
   */
  filterOption?: string | null;
  /**
   * Filter value
   */
  filter?: {} | null;
}

/**
 * Stored filter DTO
 */
export interface SelectedStoredFilterDto {
  /**
   * Filter Id
   */
  id?: string | null;
  /**
   * Filter name
   */
  name?: string | null;
  /**
   * Typ eof expression (JsonLogic/hql/sql etc)
   */
  expressionType?: string | null;
  /**
   * Expression body
   */
  expression?: {} | null;
}

/**
 * Data table --> GetData: input parameters are passed from client to server.
 */
export interface DataTableGetDataInput {
  /**
   * Data table ID
   */
  id?: string | null;
  /**
   * Page size
   */
  pageSize?: number;
  /**
   * Quick search textbox contents
   */
  quickSearch?: string | null;
  /**
   * Current page number
   */
  currentPage?: number;
  /**
   * Parent entity ID (only for ChildDataTable)
   */
  parentEntityId?: string | null;
  /**
   * Sorting settings per column
   */
  sorting?: ColumnSortingDto[] | null;
  /**
   * Advanced Filtering settings per column
   */
  filter?: ColumnFilterDto[] | null;
  /**
   * Stored Filters IDs that user has selected and that must be applied
   */
  selectedStoredFilterIds?: string[] | null;
  /**
   * Selected filters
   */
  selectedFilters?: SelectedStoredFilterDto[] | null;
}

/**
 * Represents the data of the table used by DataTables  on the client-side
 */
export interface DataTableData {
  /**
   * Total number of rows after filters
   */
  totalRows?: number;
  /**
   * Total number of rows before filters
   */
  totalRowsBeforeFilter?: number;
  /**
   * Total number of pages
   */
  totalPages?: number;
  echo?: number;
  /**
   * Data cells
   */
  rows?: { [key: string]: any }[] | null;
}

export interface DataTableDataAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: DataTableData;
}

export interface FileStreamResultAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: string | null;
}

export interface DataTableGetConfigurationQueryParams {
  id?: string | null;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type DataTableGetConfigurationProps = Omit<
  GetProps<DataTableConfigDtoAjaxResponse, AjaxResponseBase, DataTableGetConfigurationQueryParams>,
  'path'
>;

/**
 * Returns configuration of the DataTable by id
 */
export const DataTableGetConfiguration = (props: DataTableGetConfigurationProps) => (
  <Get<DataTableConfigDtoAjaxResponse, AjaxResponseBase, DataTableGetConfigurationQueryParams>
    path={`/api/DataTable/GetConfiguration`}
    {...props}
  />
);

export type UseDataTableGetConfigurationProps = Omit<
  UseGetProps<DataTableConfigDtoAjaxResponse, DataTableGetConfigurationQueryParams>,
  'path'
>;

/**
 * Returns configuration of the DataTable by id
 */
export const useDataTableGetConfiguration = (props: UseDataTableGetConfigurationProps) =>
  useGet<DataTableConfigDtoAjaxResponse, AjaxResponseBase, DataTableGetConfigurationQueryParams>(
    `/api/DataTable/GetConfiguration`,
    props
  );

export interface DataTableGetDataQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type DataTableGetDataProps = Omit<
  MutateProps<DataTableDataAjaxResponse, AjaxResponseBase, DataTableGetDataQueryParams, DataTableGetDataInput>,
  'path' | 'verb'
>;

/**
 * Returns data for the DateTable control
 */
export const DataTableGetData = (props: DataTableGetDataProps) => (
  <Mutate<DataTableDataAjaxResponse, AjaxResponseBase, DataTableGetDataQueryParams, DataTableGetDataInput>
    verb="POST"
    path={`/api/DataTable/GetData`}
    {...props}
  />
);

export type UseDataTableGetDataProps = Omit<
  UseMutateProps<DataTableDataAjaxResponse, DataTableGetDataQueryParams, DataTableGetDataInput>,
  'path' | 'verb'
>;

/**
 * Returns data for the DateTable control
 */
export const useDataTableGetData = (props: UseDataTableGetDataProps) =>
  useMutate<DataTableDataAjaxResponse, AjaxResponseBase, DataTableGetDataQueryParams, DataTableGetDataInput>(
    'POST',
    `/api/DataTable/GetData`,
    props
  );

export interface DataTableExportToExcelQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type DataTableExportToExcelProps = Omit<
  MutateProps<FileStreamResultAjaxResponse, AjaxResponseBase, DataTableExportToExcelQueryParams, DataTableGetDataInput>,
  'path' | 'verb'
>;

/**
 * Exports DataTable to Excel
 */
export const DataTableExportToExcel = (props: DataTableExportToExcelProps) => (
  <Mutate<FileStreamResultAjaxResponse, AjaxResponseBase, DataTableExportToExcelQueryParams, DataTableGetDataInput>
    verb="POST"
    path={`/api/DataTable/ExportToExcel`}
    {...props}
  />
);

export type UseDataTableExportToExcelProps = Omit<
  UseMutateProps<FileStreamResultAjaxResponse, DataTableExportToExcelQueryParams, DataTableGetDataInput>,
  'path' | 'verb'
>;

/**
 * Exports DataTable to Excel
 */
export const useDataTableExportToExcel = (props: UseDataTableExportToExcelProps) =>
  useMutate<FileStreamResultAjaxResponse, AjaxResponseBase, DataTableExportToExcelQueryParams, DataTableGetDataInput>(
    'POST',
    `/api/DataTable/ExportToExcel`,
    props
  );
