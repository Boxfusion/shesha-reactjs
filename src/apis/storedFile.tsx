/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface FileStreamResultAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: string | null;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface StoredFileDto {
  error?: string | null;
  id?: string | null;
  name?: string | null;
  fileCategory?: number | null;
  url?: string | null;
  size?: number;
  type?: string | null;
}

export interface StoredFileDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: StoredFileDto;
}

export interface BooleanAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: boolean;
}

export interface StoredFileDtoListAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: StoredFileDto[] | null;
}

/**
 * Stored File version info
 */
export interface StoredFileVersionInfoDto {
  id?: string;
  /**
   * Date of the upload
   */
  dateUploaded?: string | null;
  /**
   * File size
   */
  size?: number | null;
  /**
   * User uploaded this version
   */
  uploadedBy?: string | null;
  /**
   * File name
   */
  fileName?: string | null;
  /**
   * Version number
   */
  versionNo?: number;
  /**
   * Url for version downloading
   */
  url?: string | null;
}

export interface StoredFileVersionInfoDtoListAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: StoredFileVersionInfoDto[] | null;
}

export interface StoredFileDownloadQueryParams {
  id?: string;
  versionNo?: number | null;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type StoredFileDownloadProps = Omit<
  GetProps<FileStreamResultAjaxResponse, AjaxResponseBase, StoredFileDownloadQueryParams>,
  'path'
>;

export const StoredFileDownload = (props: StoredFileDownloadProps) => (
  <Get<FileStreamResultAjaxResponse, AjaxResponseBase, StoredFileDownloadQueryParams>
    path={`/api/StoredFile/Download`}
    {...props}
  />
);

export type UseStoredFileDownloadProps = Omit<
  UseGetProps<FileStreamResultAjaxResponse, StoredFileDownloadQueryParams>,
  'path'
>;

export const useStoredFileDownload = (props: UseStoredFileDownloadProps) =>
  useGet<FileStreamResultAjaxResponse, AjaxResponseBase, StoredFileDownloadQueryParams>(
    `/api/StoredFile/Download`,
    props
  );

export interface StoredFileUploadQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type StoredFileUploadProps = Omit<
  MutateProps<StoredFileDtoAjaxResponse, AjaxResponseBase, StoredFileUploadQueryParams, void>,
  'path' | 'verb'
>;

export const StoredFileUpload = (props: StoredFileUploadProps) => (
  <Mutate<StoredFileDtoAjaxResponse, AjaxResponseBase, StoredFileUploadQueryParams, void>
    verb="POST"
    path={`/api/StoredFile/Upload`}
    {...props}
  />
);

export type UseStoredFileUploadProps = Omit<
  UseMutateProps<StoredFileDtoAjaxResponse, StoredFileUploadQueryParams, void>,
  'path' | 'verb'
>;

export const useStoredFileUpload = (props: UseStoredFileUploadProps) =>
  useMutate<StoredFileDtoAjaxResponse, AjaxResponseBase, StoredFileUploadQueryParams, void>(
    'POST',
    `/api/StoredFile/Upload`,
    props
  );

export interface StoredFileUploadNewVersionQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type StoredFileUploadNewVersionProps = Omit<
  MutateProps<StoredFileDtoAjaxResponse, AjaxResponseBase, StoredFileUploadNewVersionQueryParams, void>,
  'path' | 'verb'
>;

export const StoredFileUploadNewVersion = (props: StoredFileUploadNewVersionProps) => (
  <Mutate<StoredFileDtoAjaxResponse, AjaxResponseBase, StoredFileUploadNewVersionQueryParams, void>
    verb="POST"
    path={`/api/StoredFile/UploadNewVersion`}
    {...props}
  />
);

export type UseStoredFileUploadNewVersionProps = Omit<
  UseMutateProps<StoredFileDtoAjaxResponse, StoredFileUploadNewVersionQueryParams, void>,
  'path' | 'verb'
>;

export const useStoredFileUploadNewVersion = (props: UseStoredFileUploadNewVersionProps) =>
  useMutate<StoredFileDtoAjaxResponse, AjaxResponseBase, StoredFileUploadNewVersionQueryParams, void>(
    'POST',
    `/api/StoredFile/UploadNewVersion`,
    props
  );

export interface StoredFileDeleteQueryParams {
  /**
   * File Id
   */
  fileId: string;
  /**
   * Id of the owner entity
   */
  ownerId?: string | null;
  /**
   * Type short alias of the owner entity
   */
  ownerType?: string | null;
  /**
   * Property name of the owner entity. Is used for direct links only (when owner references file using foreign key)
   */
  propertyName?: string | null;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type StoredFileDeleteProps = Omit<
  MutateProps<BooleanAjaxResponse, AjaxResponseBase, StoredFileDeleteQueryParams, void>,
  'path' | 'verb'
>;

/**
 * Delete file
 */
export const StoredFileDelete = (props: StoredFileDeleteProps) => (
  <Mutate<BooleanAjaxResponse, AjaxResponseBase, StoredFileDeleteQueryParams, void>
    verb="DELETE"
    path={`/api/StoredFile/Delete`}
    {...props}
  />
);

export type UseStoredFileDeleteProps = Omit<
  UseMutateProps<BooleanAjaxResponse, StoredFileDeleteQueryParams, void>,
  'path' | 'verb'
>;

/**
 * Delete file
 */
export const useStoredFileDelete = (props: UseStoredFileDeleteProps) =>
  useMutate<BooleanAjaxResponse, AjaxResponseBase, StoredFileDeleteQueryParams, void>(
    'DELETE',
    `/api/StoredFile/Delete`,
    props
  );

export interface StoredFileDownloadZipQueryParams {
  /**
   * Set to true to get files of all categories
   */
  allCategories?: boolean;
  /**
   * Id of the owner entity
   */
  ownerId: string;
  /**
   * Type short alias of the owner entity
   */
  ownerType: string;
  /**
   * Category of the file. Is used to split attachments into groups
   */
  filesCategory?: number | null;
  /**
   * Property name of the owner entity. Is used for direct links only (when owner references file using foreign key)
   */
  propertyName?: string | null;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type StoredFileDownloadZipProps = Omit<
  GetProps<FileStreamResultAjaxResponse, AjaxResponseBase, StoredFileDownloadZipQueryParams>,
  'path'
>;

/**
 * Download zip archive of all files linked to a specified entity
 */
export const StoredFileDownloadZip = (props: StoredFileDownloadZipProps) => (
  <Get<FileStreamResultAjaxResponse, AjaxResponseBase, StoredFileDownloadZipQueryParams>
    path={`/api/StoredFile/DownloadZip`}
    {...props}
  />
);

export type UseStoredFileDownloadZipProps = Omit<
  UseGetProps<FileStreamResultAjaxResponse, StoredFileDownloadZipQueryParams>,
  'path'
>;

/**
 * Download zip archive of all files linked to a specified entity
 */
export const useStoredFileDownloadZip = (props: UseStoredFileDownloadZipProps) =>
  useGet<FileStreamResultAjaxResponse, AjaxResponseBase, StoredFileDownloadZipQueryParams>(
    `/api/StoredFile/DownloadZip`,
    props
  );

export interface StoredFileFilesListQueryParams {
  /**
   * Id of the owner entity
   */
  ownerId: string;
  /**
   * Type short alias of the owner entity
   */
  ownerType: string;
  /**
   * Category of the file. Is used to split attachments into groups
   */
  filesCategory?: number | null;
  /**
   * Property name of the owner entity. Is used for direct links only (when owner references file using foreign key)
   */
  propertyName?: string | null;
  /**
   * Set to true to get files of all categories
   */
  allCategories?: boolean;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type StoredFileFilesListProps = Omit<
  GetProps<StoredFileDtoListAjaxResponse, AjaxResponseBase, StoredFileFilesListQueryParams>,
  'path'
>;

/**
 * Get list of files attached to a specified entity
 */
export const StoredFileFilesList = (props: StoredFileFilesListProps) => (
  <Get<StoredFileDtoListAjaxResponse, AjaxResponseBase, StoredFileFilesListQueryParams>
    path={`/api/StoredFile/FilesList`}
    {...props}
  />
);

export type UseStoredFileFilesListProps = Omit<
  UseGetProps<StoredFileDtoListAjaxResponse, StoredFileFilesListQueryParams>,
  'path'
>;

/**
 * Get list of files attached to a specified entity
 */
export const useStoredFileFilesList = (props: UseStoredFileFilesListProps) =>
  useGet<StoredFileDtoListAjaxResponse, AjaxResponseBase, StoredFileFilesListQueryParams>(
    `/api/StoredFile/FilesList`,
    props
  );

export interface StoredFileCreateOrUpdateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type StoredFileCreateOrUpdateProps = Omit<
  MutateProps<StoredFileDtoAjaxResponse, AjaxResponseBase, StoredFileCreateOrUpdateQueryParams, void>,
  'path' | 'verb'
>;

/**
 * Update existing file
 */
export const StoredFileCreateOrUpdate = (props: StoredFileCreateOrUpdateProps) => (
  <Mutate<StoredFileDtoAjaxResponse, AjaxResponseBase, StoredFileCreateOrUpdateQueryParams, void>
    verb="PUT"
    path={`/api/StoredFile`}
    {...props}
  />
);

export type UseStoredFileCreateOrUpdateProps = Omit<
  UseMutateProps<StoredFileDtoAjaxResponse, StoredFileCreateOrUpdateQueryParams, void>,
  'path' | 'verb'
>;

/**
 * Update existing file
 */
export const useStoredFileCreateOrUpdate = (props: UseStoredFileCreateOrUpdateProps) =>
  useMutate<StoredFileDtoAjaxResponse, AjaxResponseBase, StoredFileCreateOrUpdateQueryParams, void>(
    'PUT',
    `/api/StoredFile`,
    props
  );

export interface StoredFileGetQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type StoredFileGetProps = Omit<
  GetProps<StoredFileDtoAjaxResponse, AjaxResponseBase, StoredFileGetQueryParams>,
  'path'
>;

/**
 * Get file by id
 */
export const StoredFileGet = (props: StoredFileGetProps) => (
  <Get<StoredFileDtoAjaxResponse, AjaxResponseBase, StoredFileGetQueryParams> path={`/api/StoredFile`} {...props} />
);

export type UseStoredFileGetProps = Omit<UseGetProps<StoredFileDtoAjaxResponse, StoredFileGetQueryParams>, 'path'>;

/**
 * Get file by id
 */
export const useStoredFileGet = (props: UseStoredFileGetProps) =>
  useGet<StoredFileDtoAjaxResponse, AjaxResponseBase, StoredFileGetQueryParams>(`/api/StoredFile`, props);

export interface StoredFileDeleteFileQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type StoredFileDeleteFileProps = Omit<
  MutateProps<BooleanAjaxResponse, AjaxResponseBase, StoredFileDeleteFileQueryParams, void>,
  'path' | 'verb'
>;

/**
 * Delete file
 */
export const StoredFileDeleteFile = (props: StoredFileDeleteFileProps) => (
  <Mutate<BooleanAjaxResponse, AjaxResponseBase, StoredFileDeleteFileQueryParams, void>
    verb="DELETE"
    path={`/api/StoredFile`}
    {...props}
  />
);

export type UseStoredFileDeleteFileProps = Omit<
  UseMutateProps<BooleanAjaxResponse, StoredFileDeleteFileQueryParams, void>,
  'path' | 'verb'
>;

/**
 * Delete file
 */
export const useStoredFileDeleteFile = (props: UseStoredFileDeleteFileProps) =>
  useMutate<BooleanAjaxResponse, AjaxResponseBase, StoredFileDeleteFileQueryParams, void>(
    'DELETE',
    `/api/StoredFile`,
    props
  );

export interface StoredFileGetEntityPropertyQueryParams {
  /**
   * Property name of the owner entity. Is used for direct links only (when owner references file using foreign key)
   */
  propertyName?: string | null;
  /**
   * Id of the owner entity
   */
  ownerId: string;
  /**
   * Type short alias of the owner entity
   */
  ownerType: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type StoredFileGetEntityPropertyProps = Omit<
  GetProps<StoredFileDtoAjaxResponse, AjaxResponseBase, StoredFileGetEntityPropertyQueryParams>,
  'path'
>;

/**
 * Get file as property of the entity
 */
export const StoredFileGetEntityProperty = (props: StoredFileGetEntityPropertyProps) => (
  <Get<StoredFileDtoAjaxResponse, AjaxResponseBase, StoredFileGetEntityPropertyQueryParams>
    path={`/api/StoredFile/EntityProperty`}
    {...props}
  />
);

export type UseStoredFileGetEntityPropertyProps = Omit<
  UseGetProps<StoredFileDtoAjaxResponse, StoredFileGetEntityPropertyQueryParams>,
  'path'
>;

/**
 * Get file as property of the entity
 */
export const useStoredFileGetEntityProperty = (props: UseStoredFileGetEntityPropertyProps) =>
  useGet<StoredFileDtoAjaxResponse, AjaxResponseBase, StoredFileGetEntityPropertyQueryParams>(
    `/api/StoredFile/EntityProperty`,
    props
  );

export interface StoredFileGetFileVersionsQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type StoredFileGetFileVersionsProps = Omit<
  GetProps<StoredFileVersionInfoDtoListAjaxResponse, AjaxResponseBase, StoredFileGetFileVersionsQueryParams>,
  'path'
> & { fileId: string };

/**
 * Get versions of the file with specified Id
 */
export const StoredFileGetFileVersions = ({ fileId, ...props }: StoredFileGetFileVersionsProps) => (
  <Get<StoredFileVersionInfoDtoListAjaxResponse, AjaxResponseBase, StoredFileGetFileVersionsQueryParams>
    path={`/api/StoredFile/StoredFile/${fileId}/Versions`}
    {...props}
  />
);

export type UseStoredFileGetFileVersionsProps = Omit<
  UseGetProps<StoredFileVersionInfoDtoListAjaxResponse, StoredFileGetFileVersionsQueryParams>,
  'path'
> & { fileId: string };

/**
 * Get versions of the file with specified Id
 */
export const useStoredFileGetFileVersions = ({ fileId, ...props }: UseStoredFileGetFileVersionsProps) =>
  useGet<StoredFileVersionInfoDtoListAjaxResponse, AjaxResponseBase, StoredFileGetFileVersionsQueryParams>(
    `/api/StoredFile/StoredFile/${fileId}/Versions`,
    props
  );
