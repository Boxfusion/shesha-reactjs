/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export interface UserLogin {
  id?: number;
  tenantId?: number | null;
  userId?: number;
  loginProvider: string;
  providerKey: string;
}

export interface UserRole {
  id?: number;
  creationTime?: string;
  creatorUserId?: number | null;
  tenantId?: number | null;
  userId?: number;
  roleId?: number;
}

export interface UserClaim {
  id?: number;
  creationTime?: string;
  creatorUserId?: number | null;
  tenantId?: number | null;
  userId?: number;
  claimType?: string | null;
  claimValue?: string | null;
}

export interface UserPermissionSetting {
  id?: number;
  creationTime?: string;
  creatorUserId?: number | null;
  tenantId?: number | null;
  name: string;
  isGranted?: boolean;
  userId?: number;
}

export interface Setting {
  id?: number;
  creationTime?: string;
  creatorUserId?: number | null;
  lastModificationTime?: string | null;
  lastModifierUserId?: number | null;
  tenantId?: number | null;
  userId?: number | null;
  name: string;
  value?: string | null;
}

export interface UserToken {
  id?: number;
  tenantId?: number | null;
  userId?: number;
  loginProvider?: string | null;
  name?: string | null;
  value?: string | null;
  expireDate?: string | null;
}

export interface User {
  id?: number;
  creationTime?: string;
  creatorUserId?: number | null;
  lastModificationTime?: string | null;
  lastModifierUserId?: number | null;
  isDeleted?: boolean;
  deleterUserId?: number | null;
  deletionTime?: string | null;
  authenticationSource?: string | null;
  userName: string;
  tenantId?: number | null;
  name: string;
  surname: string;
  fullName?: string | null;
  password: string;
  emailConfirmationCode?: string | null;
  passwordResetCode?: string | null;
  lockoutEndDateUtc?: string | null;
  accessFailedCount?: number;
  isLockoutEnabled?: boolean;
  phoneNumber?: string | null;
  isPhoneNumberConfirmed?: boolean;
  securityStamp?: string | null;
  isTwoFactorEnabled?: boolean;
  logins?: UserLogin[] | null;
  roles?: UserRole[] | null;
  claims?: UserClaim[] | null;
  permissions?: UserPermissionSetting[] | null;
  settings?: Setting[] | null;
  isEmailConfirmed?: boolean;
  isActive?: boolean;
  normalizedUserName: string;
  normalizedEmailAddress: string;
  concurrencyStamp?: string | null;
  tokens?: UserToken[] | null;
  deleterUser?: User;
  creatorUser?: User;
  lastModifierUser?: User;
  lastLoginDate?: string | null;
  emailAddress?: string | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface UserAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: User;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface GuidNullableEntityWithDisplayNameDto {
  id?: string | null;
  displayText?: string | null;
}

export interface ReferenceListItemValueDto {
  item?: string | null;
  itemValue?: number | null;
}

export interface StoredFileDto {
  error?: string | null;
  id?: string | null;
  name?: string | null;
  fileCategory?: number | null;
  url?: string | null;
  size?: number;
  type?: string | null;
}

export interface ApplicationResponse {
  id?: string;
  name?: string | null;
  surname?: string | null;
  idNumber?: string | null;
  dateOfBirth?: string | null;
  cellphone?: string | null;
  email?: string | null;
  residentialAddress?: string | null;
  province?: GuidNullableEntityWithDisplayNameDto;
  applicationStatus?: ReferenceListItemValueDto;
  region?: GuidNullableEntityWithDisplayNameDto;
  registeredMember?: GuidNullableEntityWithDisplayNameDto;
  branch?: GuidNullableEntityWithDisplayNameDto;
  supportingDoc?: StoredFileDto;
  applicationDate?: string | null;
}

export interface ApplicationResponseAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: ApplicationResponse;
}

export interface ApplicationsApplyForMembershipQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ApplicationsApplyForMembershipProps = Omit<
  MutateProps<UserAjaxResponse, AjaxResponseBase, ApplicationsApplyForMembershipQueryParams, void>,
  'path' | 'verb'
>;

export const ApplicationsApplyForMembership = (props: ApplicationsApplyForMembershipProps) => (
  <Mutate<UserAjaxResponse, AjaxResponseBase, ApplicationsApplyForMembershipQueryParams, void>
    verb="POST"
    path={`/api/services/Gma/Applications/ApplyForMembership`}
    {...props}
  />
);

export type UseApplicationsApplyForMembershipProps = Omit<
  UseMutateProps<UserAjaxResponse, ApplicationsApplyForMembershipQueryParams, void>,
  'path' | 'verb'
>;

export const useApplicationsApplyForMembership = (props: UseApplicationsApplyForMembershipProps) =>
  useMutate<UserAjaxResponse, AjaxResponseBase, ApplicationsApplyForMembershipQueryParams, void>(
    'POST',
    `/api/services/Gma/Applications/ApplyForMembership`,
    props
  );

export interface ApplicationsGetQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ApplicationsGetProps = Omit<
  GetProps<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsGetQueryParams>,
  'path'
>;

export const ApplicationsGet = (props: ApplicationsGetProps) => (
  <Get<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsGetQueryParams>
    path={`/api/services/Gma/Applications/Get`}
    {...props}
  />
);

export type UseApplicationsGetProps = Omit<
  UseGetProps<ApplicationResponseAjaxResponse, ApplicationsGetQueryParams>,
  'path'
>;

export const useApplicationsGet = (props: UseApplicationsGetProps) =>
  useGet<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsGetQueryParams>(
    `/api/services/Gma/Applications/Get`,
    props
  );

export interface ApplicationsGetCurrentUserApplicationQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ApplicationsGetCurrentUserApplicationProps = Omit<
  GetProps<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsGetCurrentUserApplicationQueryParams>,
  'path'
>;

export const ApplicationsGetCurrentUserApplication = (props: ApplicationsGetCurrentUserApplicationProps) => (
  <Get<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsGetCurrentUserApplicationQueryParams>
    path={`/api/services/Gma/Applications/GetCurrentUserApplication`}
    {...props}
  />
);

export type UseApplicationsGetCurrentUserApplicationProps = Omit<
  UseGetProps<ApplicationResponseAjaxResponse, ApplicationsGetCurrentUserApplicationQueryParams>,
  'path'
>;

export const useApplicationsGetCurrentUserApplication = (props: UseApplicationsGetCurrentUserApplicationProps) =>
  useGet<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsGetCurrentUserApplicationQueryParams>(
    `/api/services/Gma/Applications/GetCurrentUserApplication`,
    props
  );
