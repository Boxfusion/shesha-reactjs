/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

/**
 * Configurable Component DTO
 */
export interface ConfigurableComponentDto {
  id?: string;
  /**
   * Form path/id is used to identify a form
   */
  path?: string | null;
  /**
   * Form name
   */
  name?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Settings in JSON format
   */
  settings?: string | null;
  /**
   * Type of the form model
   */
  modelType?: string | null;
}

/**
 * Update component settings input
 */
export interface ConfigurableComponentUpdateSettingsInput {
  id?: string;
  /**
   * Settings in JSON format
   */
  settings?: string | null;
}

export type ConfigurableComponentGetProps = Omit<GetProps<ConfigurableComponentDto, unknown, void>, 'path'> & {
  id: string;
};

export const ConfigurableComponentGet = ({ id, ...props }: ConfigurableComponentGetProps) => (
  <Get<ConfigurableComponentDto, unknown, void> path={`/api/services/ConfigurableComponents/${id}`} {...props} />
);

export type UseConfigurableComponentGetProps = Omit<UseGetProps<ConfigurableComponentDto, void>, 'path'> & {
  id: string;
};

export const useConfigurableComponentGet = ({ id, ...props }: UseConfigurableComponentGetProps) =>
  useGet<ConfigurableComponentDto, unknown, void>(`/api/services/ConfigurableComponents/${id}`, props);

export type ConfigurableComponentUpdateProps = Omit<
  MutateProps<ConfigurableComponentDto, unknown, void, ConfigurableComponentDto>,
  'path' | 'verb'
>;

export const ConfigurableComponentUpdate = (props: ConfigurableComponentUpdateProps) => (
  <Mutate<ConfigurableComponentDto, unknown, void, ConfigurableComponentDto>
    verb="PUT"
    path={`/api/services/ConfigurableComponents`}
    {...props}
  />
);

export type UseConfigurableComponentUpdateProps = Omit<
  UseMutateProps<ConfigurableComponentDto, void, ConfigurableComponentDto>,
  'path' | 'verb'
>;

export const useConfigurableComponentUpdate = (props: UseConfigurableComponentUpdateProps) =>
  useMutate<ConfigurableComponentDto, unknown, void, ConfigurableComponentDto>(
    'PUT',
    `/api/services/ConfigurableComponents`,
    props
  );

export type ConfigurableComponentCreateProps = Omit<
  MutateProps<ConfigurableComponentDto, unknown, void, ConfigurableComponentDto>,
  'path' | 'verb'
>;

export const ConfigurableComponentCreate = (props: ConfigurableComponentCreateProps) => (
  <Mutate<ConfigurableComponentDto, unknown, void, ConfigurableComponentDto>
    verb="POST"
    path={`/api/services/ConfigurableComponents`}
    {...props}
  />
);

export type UseConfigurableComponentCreateProps = Omit<
  UseMutateProps<ConfigurableComponentDto, void, ConfigurableComponentDto>,
  'path' | 'verb'
>;

export const useConfigurableComponentCreate = (props: UseConfigurableComponentCreateProps) =>
  useMutate<ConfigurableComponentDto, unknown, void, ConfigurableComponentDto>(
    'POST',
    `/api/services/ConfigurableComponents`,
    props
  );

export type ConfigurableComponentUpdateSettingsProps = Omit<
  MutateProps<void, unknown, void, ConfigurableComponentUpdateSettingsInput>,
  'path' | 'verb'
> & { id: string };

export const ConfigurableComponentUpdateSettings = ({ id, ...props }: ConfigurableComponentUpdateSettingsProps) => (
  <Mutate<void, unknown, void, ConfigurableComponentUpdateSettingsInput>
    verb="PUT"
    path={`/api/services/ConfigurableComponents/${id}/Settings`}
    {...props}
  />
);

export type UseConfigurableComponentUpdateSettingsProps = Omit<
  UseMutateProps<void, void, ConfigurableComponentUpdateSettingsInput>,
  'path' | 'verb'
> & { id: string };

export const useConfigurableComponentUpdateSettings = ({ id, ...props }: UseConfigurableComponentUpdateSettingsProps) =>
  useMutate<void, unknown, void, ConfigurableComponentUpdateSettingsInput>(
    'PUT',
    `/api/services/ConfigurableComponents/${id}/Settings`,
    props
  );
