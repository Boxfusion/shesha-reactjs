/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';
export const SPEC_VERSION = 'v1';
export interface CreateRoleDto {
  name: string;
  displayName: string;
  normalizedName?: string | null;
  description?: string | null;
  grantedPermissions?: string[] | null;
}

export interface RoleDto {
  id?: number;
  name: string;
  displayName: string;
  normalizedName?: string | null;
  description?: string | null;
  grantedPermissions?: string[] | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface RoleDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: RoleDto;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface RoleListDto {
  id?: number;
  name?: string | null;
  displayName?: string | null;
  isStatic?: boolean;
  isDefault?: boolean;
  creationTime?: string;
}

export interface RoleListDtoListResultDto {
  items?: RoleListDto[] | null;
}

export interface RoleListDtoListResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: RoleListDtoListResultDto;
}

export interface PermissionDto {
  id?: number;
  name?: string | null;
  displayName?: string | null;
  description?: string | null;
}

export interface PermissionDtoListResultDto {
  items?: PermissionDto[] | null;
}

export interface PermissionDtoListResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: PermissionDtoListResultDto;
}

export interface RoleEditDto {
  id?: number;
  name: string;
  displayName: string;
  description?: string | null;
  isStatic?: boolean;
}

export interface FlatPermissionDto {
  name?: string | null;
  displayName?: string | null;
  description?: string | null;
}

export interface GetRoleForEditOutput {
  role?: RoleEditDto;
  permissions?: FlatPermissionDto[] | null;
  grantedPermissionNames?: string[] | null;
}

export interface GetRoleForEditOutputAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: GetRoleForEditOutput;
}

export interface RoleDtoPagedResultDto {
  items?: RoleDto[] | null;
  totalCount?: number;
}

export interface RoleDtoPagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: RoleDtoPagedResultDto;
}

export interface RoleCreateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type RoleCreateProps = Omit<
  MutateProps<RoleDtoAjaxResponse, AjaxResponseBase, RoleCreateQueryParams, CreateRoleDto, void>,
  'path' | 'verb'
>;

export const RoleCreate = (props: RoleCreateProps) => (
  <Mutate<RoleDtoAjaxResponse, AjaxResponseBase, RoleCreateQueryParams, CreateRoleDto, void>
    verb="POST"
    path={`/api/services/app/Role/Create`}
    {...props}
  />
);

export type UseRoleCreateProps = Omit<
  UseMutateProps<RoleDtoAjaxResponse, AjaxResponseBase, RoleCreateQueryParams, CreateRoleDto, void>,
  'path' | 'verb'
>;

export const useRoleCreate = (props: UseRoleCreateProps) =>
  useMutate<RoleDtoAjaxResponse, AjaxResponseBase, RoleCreateQueryParams, CreateRoleDto, void>(
    'POST',
    `/api/services/app/Role/Create`,
    props
  );

export interface RoleGetRolesQueryParams {
  permission?: string | null;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type RoleGetRolesProps = Omit<
  GetProps<RoleListDtoListResultDtoAjaxResponse, AjaxResponseBase, RoleGetRolesQueryParams, void>,
  'path'
>;

export const RoleGetRoles = (props: RoleGetRolesProps) => (
  <Get<RoleListDtoListResultDtoAjaxResponse, AjaxResponseBase, RoleGetRolesQueryParams, void>
    path={`/api/services/app/Role/GetRoles`}
    {...props}
  />
);

export type UseRoleGetRolesProps = Omit<
  UseGetProps<RoleListDtoListResultDtoAjaxResponse, AjaxResponseBase, RoleGetRolesQueryParams, void>,
  'path'
>;

export const useRoleGetRoles = (props: UseRoleGetRolesProps) =>
  useGet<RoleListDtoListResultDtoAjaxResponse, AjaxResponseBase, RoleGetRolesQueryParams, void>(
    `/api/services/app/Role/GetRoles`,
    props
  );

export interface RoleUpdateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type RoleUpdateProps = Omit<
  MutateProps<RoleDtoAjaxResponse, AjaxResponseBase, RoleUpdateQueryParams, RoleDto, void>,
  'path' | 'verb'
>;

export const RoleUpdate = (props: RoleUpdateProps) => (
  <Mutate<RoleDtoAjaxResponse, AjaxResponseBase, RoleUpdateQueryParams, RoleDto, void>
    verb="PUT"
    path={`/api/services/app/Role/Update`}
    {...props}
  />
);

export type UseRoleUpdateProps = Omit<
  UseMutateProps<RoleDtoAjaxResponse, AjaxResponseBase, RoleUpdateQueryParams, RoleDto, void>,
  'path' | 'verb'
>;

export const useRoleUpdate = (props: UseRoleUpdateProps) =>
  useMutate<RoleDtoAjaxResponse, AjaxResponseBase, RoleUpdateQueryParams, RoleDto, void>(
    'PUT',
    `/api/services/app/Role/Update`,
    props
  );

export interface RoleDeleteQueryParams {
  id?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type RoleDeleteProps = Omit<MutateProps<void, unknown, RoleDeleteQueryParams, void, void>, 'path' | 'verb'>;

export const RoleDelete = (props: RoleDeleteProps) => (
  <Mutate<void, unknown, RoleDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/app/Role/Delete`}
    {...props}
  />
);

export type UseRoleDeleteProps = Omit<
  UseMutateProps<void, unknown, RoleDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const useRoleDelete = (props: UseRoleDeleteProps) =>
  useMutate<void, unknown, RoleDeleteQueryParams, void, void>('DELETE', `/api/services/app/Role/Delete`, { ...props });

export interface RoleGetAllPermissionsQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type RoleGetAllPermissionsProps = Omit<
  GetProps<PermissionDtoListResultDtoAjaxResponse, AjaxResponseBase, RoleGetAllPermissionsQueryParams, void>,
  'path'
>;

export const RoleGetAllPermissions = (props: RoleGetAllPermissionsProps) => (
  <Get<PermissionDtoListResultDtoAjaxResponse, AjaxResponseBase, RoleGetAllPermissionsQueryParams, void>
    path={`/api/services/app/Role/GetAllPermissions`}
    {...props}
  />
);

export type UseRoleGetAllPermissionsProps = Omit<
  UseGetProps<PermissionDtoListResultDtoAjaxResponse, AjaxResponseBase, RoleGetAllPermissionsQueryParams, void>,
  'path'
>;

export const useRoleGetAllPermissions = (props: UseRoleGetAllPermissionsProps) =>
  useGet<PermissionDtoListResultDtoAjaxResponse, AjaxResponseBase, RoleGetAllPermissionsQueryParams, void>(
    `/api/services/app/Role/GetAllPermissions`,
    props
  );

export interface RoleGetRoleForEditQueryParams {
  id?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type RoleGetRoleForEditProps = Omit<
  GetProps<GetRoleForEditOutputAjaxResponse, AjaxResponseBase, RoleGetRoleForEditQueryParams, void>,
  'path'
>;

export const RoleGetRoleForEdit = (props: RoleGetRoleForEditProps) => (
  <Get<GetRoleForEditOutputAjaxResponse, AjaxResponseBase, RoleGetRoleForEditQueryParams, void>
    path={`/api/services/app/Role/GetRoleForEdit`}
    {...props}
  />
);

export type UseRoleGetRoleForEditProps = Omit<
  UseGetProps<GetRoleForEditOutputAjaxResponse, AjaxResponseBase, RoleGetRoleForEditQueryParams, void>,
  'path'
>;

export const useRoleGetRoleForEdit = (props: UseRoleGetRoleForEditProps) =>
  useGet<GetRoleForEditOutputAjaxResponse, AjaxResponseBase, RoleGetRoleForEditQueryParams, void>(
    `/api/services/app/Role/GetRoleForEdit`,
    props
  );

export interface RoleGetQueryParams {
  id?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type RoleGetProps = Omit<GetProps<RoleDtoAjaxResponse, AjaxResponseBase, RoleGetQueryParams, void>, 'path'>;

export const RoleGet = (props: RoleGetProps) => (
  <Get<RoleDtoAjaxResponse, AjaxResponseBase, RoleGetQueryParams, void>
    path={`/api/services/app/Role/Get`}
    {...props}
  />
);

export type UseRoleGetProps = Omit<
  UseGetProps<RoleDtoAjaxResponse, AjaxResponseBase, RoleGetQueryParams, void>,
  'path'
>;

export const useRoleGet = (props: UseRoleGetProps) =>
  useGet<RoleDtoAjaxResponse, AjaxResponseBase, RoleGetQueryParams, void>(`/api/services/app/Role/Get`, props);

export interface RoleGetAllQueryParams {
  keyword?: string | null;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type RoleGetAllProps = Omit<
  GetProps<RoleDtoPagedResultDtoAjaxResponse, AjaxResponseBase, RoleGetAllQueryParams, void>,
  'path'
>;

export const RoleGetAll = (props: RoleGetAllProps) => (
  <Get<RoleDtoPagedResultDtoAjaxResponse, AjaxResponseBase, RoleGetAllQueryParams, void>
    path={`/api/services/app/Role/GetAll`}
    {...props}
  />
);

export type UseRoleGetAllProps = Omit<
  UseGetProps<RoleDtoPagedResultDtoAjaxResponse, AjaxResponseBase, RoleGetAllQueryParams, void>,
  'path'
>;

export const useRoleGetAll = (props: UseRoleGetAllProps) =>
  useGet<RoleDtoPagedResultDtoAjaxResponse, AjaxResponseBase, RoleGetAllQueryParams, void>(
    `/api/services/app/Role/GetAll`,
    props
  );
