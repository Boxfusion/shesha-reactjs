/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';
export const SPEC_VERSION = 'v1';
export interface CreateTenantDto {
  tenancyName: string;
  name: string;
  adminEmailAddress: string;
  connectionString?: string | null;
  isActive?: boolean;
}

export interface TenantDto {
  id?: number;
  tenancyName: string;
  name: string;
  isActive?: boolean;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface TenantDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: TenantDto;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface TenantDtoPagedResultDto {
  items?: TenantDto[] | null;
  totalCount?: number;
}

export interface TenantDtoPagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: TenantDtoPagedResultDto;
}

export interface TenantCreateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type TenantCreateProps = Omit<
  MutateProps<TenantDtoAjaxResponse, AjaxResponseBase, TenantCreateQueryParams, CreateTenantDto, void>,
  'path' | 'verb'
>;

export const TenantCreate = (props: TenantCreateProps) => (
  <Mutate<TenantDtoAjaxResponse, AjaxResponseBase, TenantCreateQueryParams, CreateTenantDto, void>
    verb="POST"
    path={`/api/services/app/Tenant/Create`}
    {...props}
  />
);

export type UseTenantCreateProps = Omit<
  UseMutateProps<TenantDtoAjaxResponse, AjaxResponseBase, TenantCreateQueryParams, CreateTenantDto, void>,
  'path' | 'verb'
>;

export const useTenantCreate = (props: UseTenantCreateProps) =>
  useMutate<TenantDtoAjaxResponse, AjaxResponseBase, TenantCreateQueryParams, CreateTenantDto, void>(
    'POST',
    `/api/services/app/Tenant/Create`,
    props
  );

export interface TenantDeleteQueryParams {
  id?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type TenantDeleteProps = Omit<MutateProps<void, unknown, TenantDeleteQueryParams, void, void>, 'path' | 'verb'>;

export const TenantDelete = (props: TenantDeleteProps) => (
  <Mutate<void, unknown, TenantDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/app/Tenant/Delete`}
    {...props}
  />
);

export type UseTenantDeleteProps = Omit<
  UseMutateProps<void, unknown, TenantDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const useTenantDelete = (props: UseTenantDeleteProps) =>
  useMutate<void, unknown, TenantDeleteQueryParams, void, void>('DELETE', `/api/services/app/Tenant/Delete`, {
    ...props,
  });

export interface TenantGetQueryParams {
  id?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type TenantGetProps = Omit<
  GetProps<TenantDtoAjaxResponse, AjaxResponseBase, TenantGetQueryParams, void>,
  'path'
>;

export const TenantGet = (props: TenantGetProps) => (
  <Get<TenantDtoAjaxResponse, AjaxResponseBase, TenantGetQueryParams, void>
    path={`/api/services/app/Tenant/Get`}
    {...props}
  />
);

export type UseTenantGetProps = Omit<
  UseGetProps<TenantDtoAjaxResponse, AjaxResponseBase, TenantGetQueryParams, void>,
  'path'
>;

export const useTenantGet = (props: UseTenantGetProps) =>
  useGet<TenantDtoAjaxResponse, AjaxResponseBase, TenantGetQueryParams, void>(`/api/services/app/Tenant/Get`, props);

export interface TenantGetAllQueryParams {
  keyword?: string | null;
  isActive?: boolean | null;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type TenantGetAllProps = Omit<
  GetProps<TenantDtoPagedResultDtoAjaxResponse, AjaxResponseBase, TenantGetAllQueryParams, void>,
  'path'
>;

export const TenantGetAll = (props: TenantGetAllProps) => (
  <Get<TenantDtoPagedResultDtoAjaxResponse, AjaxResponseBase, TenantGetAllQueryParams, void>
    path={`/api/services/app/Tenant/GetAll`}
    {...props}
  />
);

export type UseTenantGetAllProps = Omit<
  UseGetProps<TenantDtoPagedResultDtoAjaxResponse, AjaxResponseBase, TenantGetAllQueryParams, void>,
  'path'
>;

export const useTenantGetAll = (props: UseTenantGetAllProps) =>
  useGet<TenantDtoPagedResultDtoAjaxResponse, AjaxResponseBase, TenantGetAllQueryParams, void>(
    `/api/services/app/Tenant/GetAll`,
    props
  );

export interface TenantUpdateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type TenantUpdateProps = Omit<
  MutateProps<TenantDtoAjaxResponse, AjaxResponseBase, TenantUpdateQueryParams, TenantDto, void>,
  'path' | 'verb'
>;

export const TenantUpdate = (props: TenantUpdateProps) => (
  <Mutate<TenantDtoAjaxResponse, AjaxResponseBase, TenantUpdateQueryParams, TenantDto, void>
    verb="PUT"
    path={`/api/services/app/Tenant/Update`}
    {...props}
  />
);

export type UseTenantUpdateProps = Omit<
  UseMutateProps<TenantDtoAjaxResponse, AjaxResponseBase, TenantUpdateQueryParams, TenantDto, void>,
  'path' | 'verb'
>;

export const useTenantUpdate = (props: UseTenantUpdateProps) =>
  useMutate<TenantDtoAjaxResponse, AjaxResponseBase, TenantUpdateQueryParams, TenantDto, void>(
    'PUT',
    `/api/services/app/Tenant/Update`,
    props
  );
