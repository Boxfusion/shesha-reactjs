/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';
export const SPEC_VERSION = 'v1';
export interface GuidNullableEntityWithDisplayNameDto {
  id?: string | null;
  displayText?: string | null;
}

export interface ApplicationInput {
  id?: string;
  username?: string | null;
  password?: string | null;
  name?: string | null;
  surname?: string | null;
  idNumber?: string | null;
  dateOfBirth?: string | null;
  cellphone?: string | null;
  email?: string | null;
  residentialAddress?: string | null;
  province?: GuidNullableEntityWithDisplayNameDto;
  region?: GuidNullableEntityWithDisplayNameDto;
  registeredMember?: GuidNullableEntityWithDisplayNameDto;
  branch?: GuidNullableEntityWithDisplayNameDto;
  supportingDoc?: string | null;
}

export interface ReferenceListItemValueDto {
  item?: string | null;
  itemValue?: number | null;
}

export interface StoredFileDto {
  error?: string | null;
  id?: string | null;
  name?: string | null;
  fileCategory?: number | null;
  url?: string | null;
  size?: number;
  type?: string | null;
}

export interface ApplicationResponse {
  id?: string;
  name?: string | null;
  surname?: string | null;
  idNumber?: string | null;
  dateOfBirth?: string | null;
  cellphone?: string | null;
  email?: string | null;
  residentialAddress?: string | null;
  province?: GuidNullableEntityWithDisplayNameDto;
  applicationStatus?: ReferenceListItemValueDto;
  region?: GuidNullableEntityWithDisplayNameDto;
  registeredMember?: GuidNullableEntityWithDisplayNameDto;
  branch?: GuidNullableEntityWithDisplayNameDto;
  supportingDoc?: StoredFileDto;
  applicationDate?: string | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface ApplicationResponseAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: ApplicationResponse;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface ApplicationUpdate {
  id?: string;
  name?: string | null;
  surname?: string | null;
  dateOfBirth?: string | null;
  cellphone?: string | null;
  email?: string | null;
  residentialAddress?: string | null;
  province?: GuidNullableEntityWithDisplayNameDto;
  region?: GuidNullableEntityWithDisplayNameDto;
  registeredMember?: GuidNullableEntityWithDisplayNameDto;
  branch?: GuidNullableEntityWithDisplayNameDto;
  supportingDoc?: string | null;
}

export interface ApplicationsApplyQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ApplicationsApplyProps = Omit<
  MutateProps<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsApplyQueryParams, ApplicationInput, void>,
  'path' | 'verb'
>;

export const ApplicationsApply = (props: ApplicationsApplyProps) => (
  <Mutate<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsApplyQueryParams, ApplicationInput, void>
    verb="POST"
    path={`/api/services/Gma/Applications/Apply`}
    {...props}
  />
);

export type UseApplicationsApplyProps = Omit<
  UseMutateProps<
    ApplicationResponseAjaxResponse,
    AjaxResponseBase,
    ApplicationsApplyQueryParams,
    ApplicationInput,
    void
  >,
  'path' | 'verb'
>;

export const useApplicationsApply = (props: UseApplicationsApplyProps) =>
  useMutate<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsApplyQueryParams, ApplicationInput, void>(
    'POST',
    `/api/services/Gma/Applications/Apply`,
    props
  );

export interface ApplicationsAcceptQueryParams {
  applicationId?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ApplicationsAcceptProps = Omit<
  MutateProps<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsAcceptQueryParams, void, void>,
  'path' | 'verb'
>;

export const ApplicationsAccept = (props: ApplicationsAcceptProps) => (
  <Mutate<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsAcceptQueryParams, void, void>
    verb="POST"
    path={`/api/services/Gma/Applications/Accept`}
    {...props}
  />
);

export type UseApplicationsAcceptProps = Omit<
  UseMutateProps<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsAcceptQueryParams, void, void>,
  'path' | 'verb'
>;

export const useApplicationsAccept = (props: UseApplicationsAcceptProps) =>
  useMutate<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsAcceptQueryParams, void, void>(
    'POST',
    `/api/services/Gma/Applications/Accept`,
    props
  );

export interface ApplicationsUpdateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ApplicationsUpdateProps = Omit<
  MutateProps<
    ApplicationResponseAjaxResponse,
    AjaxResponseBase,
    ApplicationsUpdateQueryParams,
    ApplicationUpdate,
    void
  >,
  'path' | 'verb'
>;

export const ApplicationsUpdate = (props: ApplicationsUpdateProps) => (
  <Mutate<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsUpdateQueryParams, ApplicationUpdate, void>
    verb="PUT"
    path={`/api/services/Gma/Applications/Update`}
    {...props}
  />
);

export type UseApplicationsUpdateProps = Omit<
  UseMutateProps<
    ApplicationResponseAjaxResponse,
    AjaxResponseBase,
    ApplicationsUpdateQueryParams,
    ApplicationUpdate,
    void
  >,
  'path' | 'verb'
>;

export const useApplicationsUpdate = (props: UseApplicationsUpdateProps) =>
  useMutate<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsUpdateQueryParams, ApplicationUpdate, void>(
    'PUT',
    `/api/services/Gma/Applications/Update`,
    props
  );

export interface ApplicationsRejectQueryParams {
  applicationId?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ApplicationsRejectProps = Omit<
  MutateProps<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsRejectQueryParams, void, void>,
  'path' | 'verb'
>;

export const ApplicationsReject = (props: ApplicationsRejectProps) => (
  <Mutate<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsRejectQueryParams, void, void>
    verb="POST"
    path={`/api/services/Gma/Applications/Reject`}
    {...props}
  />
);

export type UseApplicationsRejectProps = Omit<
  UseMutateProps<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsRejectQueryParams, void, void>,
  'path' | 'verb'
>;

export const useApplicationsReject = (props: UseApplicationsRejectProps) =>
  useMutate<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsRejectQueryParams, void, void>(
    'POST',
    `/api/services/Gma/Applications/Reject`,
    props
  );

export interface ApplicationsCancelQueryParams {
  applicationId?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ApplicationsCancelProps = Omit<
  MutateProps<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsCancelQueryParams, void, void>,
  'path' | 'verb'
>;

export const ApplicationsCancel = (props: ApplicationsCancelProps) => (
  <Mutate<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsCancelQueryParams, void, void>
    verb="POST"
    path={`/api/services/Gma/Applications/Cancel`}
    {...props}
  />
);

export type UseApplicationsCancelProps = Omit<
  UseMutateProps<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsCancelQueryParams, void, void>,
  'path' | 'verb'
>;

export const useApplicationsCancel = (props: UseApplicationsCancelProps) =>
  useMutate<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsCancelQueryParams, void, void>(
    'POST',
    `/api/services/Gma/Applications/Cancel`,
    props
  );

export interface ApplicationsReactivateQueryParams {
  applicationId?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ApplicationsReactivateProps = Omit<
  MutateProps<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsReactivateQueryParams, void, void>,
  'path' | 'verb'
>;

export const ApplicationsReactivate = (props: ApplicationsReactivateProps) => (
  <Mutate<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsReactivateQueryParams, void, void>
    verb="POST"
    path={`/api/services/Gma/Applications/Reactivate`}
    {...props}
  />
);

export type UseApplicationsReactivateProps = Omit<
  UseMutateProps<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsReactivateQueryParams, void, void>,
  'path' | 'verb'
>;

export const useApplicationsReactivate = (props: UseApplicationsReactivateProps) =>
  useMutate<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsReactivateQueryParams, void, void>(
    'POST',
    `/api/services/Gma/Applications/Reactivate`,
    props
  );

export interface ApplicationsGetQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ApplicationsGetProps = Omit<
  GetProps<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsGetQueryParams, void>,
  'path'
>;

export const ApplicationsGet = (props: ApplicationsGetProps) => (
  <Get<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsGetQueryParams, void>
    path={`/api/services/Gma/Applications/Get`}
    {...props}
  />
);

export type UseApplicationsGetProps = Omit<
  UseGetProps<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsGetQueryParams, void>,
  'path'
>;

export const useApplicationsGet = (props: UseApplicationsGetProps) =>
  useGet<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsGetQueryParams, void>(
    `/api/services/Gma/Applications/Get`,
    props
  );

export interface ApplicationsGetCurrentUserApplicationQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ApplicationsGetCurrentUserApplicationProps = Omit<
  GetProps<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsGetCurrentUserApplicationQueryParams, void>,
  'path'
>;

export const ApplicationsGetCurrentUserApplication = (props: ApplicationsGetCurrentUserApplicationProps) => (
  <Get<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsGetCurrentUserApplicationQueryParams, void>
    path={`/api/services/Gma/Applications/GetCurrentUserApplication`}
    {...props}
  />
);

export type UseApplicationsGetCurrentUserApplicationProps = Omit<
  UseGetProps<
    ApplicationResponseAjaxResponse,
    AjaxResponseBase,
    ApplicationsGetCurrentUserApplicationQueryParams,
    void
  >,
  'path'
>;

export const useApplicationsGetCurrentUserApplication = (props: UseApplicationsGetCurrentUserApplicationProps) =>
  useGet<ApplicationResponseAjaxResponse, AjaxResponseBase, ApplicationsGetCurrentUserApplicationQueryParams, void>(
    `/api/services/Gma/Applications/GetCurrentUserApplication`,
    props
  );
