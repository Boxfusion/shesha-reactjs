/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';
export const SPEC_VERSION = 'v1';
export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface StringAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: string | null;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface ItemTypeFilterModel {
  typeShortAlias?: string | null;
  subType?: number | null;
}

export interface PagingModel {
  firstIdx?: number;
  lastIdx?: number;
  totalCount?: number;
  pageNumber?: number;
  totalPagesCount?: number;
}

export type RefListPriority = 1 | 2 | 3 | 4;

export interface InboxItemDto {
  id?: string;
  entityId?: string;
  entityTypeShortAlias?: string | null;
  subType?: number | null;
  processConfigurationId?: string | null;
  priority?: RefListPriority;
  processName?: string | null;
  fullNumber?: string | null;
  heading?: string | null;
  checkpointDate?: string | null;
  dueDate?: string | null;
  todoId?: string;
  initiator?: string | null;
  actionText?: string | null;
  receivedOn?: string;
  userHasOpened?: boolean;
  isGrayedOut?: boolean;
  inProgressComments?: string | null;
  jsonProgress?: string | null;
}

export interface InboxItemsResponse {
  paging?: PagingModel;
  items?: InboxItemDto[] | null;
}

export interface InboxItemsResponseAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: InboxItemsResponse;
}

export interface MyItemDto {
  id?: string;
  entityId?: string;
  entityTypeShortAlias?: string | null;
  subType?: number | null;
  processConfigurationId?: string | null;
  priority?: RefListPriority;
  processName?: string | null;
  fullNumber?: string | null;
  heading?: string | null;
  checkpointDate?: string | null;
  dueDate?: string | null;
  initiatedOn?: string;
  jsonProgress?: string | null;
}

export interface MyItemsResponse {
  paging?: PagingModel;
  items?: MyItemDto[] | null;
}

export interface MyItemsResponseAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: MyItemsResponse;
}

export interface ArchivedItemDto {
  [key: string]: any;
}

export interface ArchivedItemsResponse {
  paging?: PagingModel;
  items?: ArchivedItemDto[] | null;
}

export interface ArchivedItemsResponseAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: ArchivedItemsResponse;
}

export interface SentItemDto {
  id?: string;
  entityId?: string;
  entityTypeShortAlias?: string | null;
  subType?: number | null;
  processConfigurationId?: string | null;
  priority?: RefListPriority;
  processName?: string | null;
  fullNumber?: string | null;
  heading?: string | null;
  checkpointDate?: string | null;
  dueDate?: string | null;
  completedOn?: string;
  initiator?: string | null;
  actionText?: string | null;
  jsonProgress?: string | null;
}

export interface SentItemsResponse {
  paging?: PagingModel;
  items?: SentItemDto[] | null;
}

export interface SentItemsResponseAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: SentItemsResponse;
}

export interface DraftItemDto {
  id?: string;
  entityId?: string;
  entityTypeShortAlias?: string | null;
  subType?: number | null;
  processConfigurationId?: string | null;
  priority?: RefListPriority;
  processName?: string | null;
  fullNumber?: string | null;
  heading?: string | null;
  checkpointDate?: string | null;
  dueDate?: string | null;
  createdOn?: string;
}

export interface DraftItemsResponse {
  paging?: PagingModel;
  items?: DraftItemDto[] | null;
}

export interface DraftItemsResponseAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: DraftItemsResponse;
}

export interface WorkflowExecutionLogResponseItem {
  actionText?: string | null;
  completedBy?: string | null;
  completedOn?: string;
}

export interface WorkflowExecutionLogResponse {
  items?: WorkflowExecutionLogResponseItem[] | null;
}

export interface WorkflowExecutionLogResponseAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: WorkflowExecutionLogResponse;
}

export interface WorkflowBootstrapWorkflowDefinitionsQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type WorkflowBootstrapWorkflowDefinitionsProps = Omit<
  MutateProps<StringAjaxResponse, AjaxResponseBase, WorkflowBootstrapWorkflowDefinitionsQueryParams, void, void>,
  'path' | 'verb'
>;

export const WorkflowBootstrapWorkflowDefinitions = (props: WorkflowBootstrapWorkflowDefinitionsProps) => (
  <Mutate<StringAjaxResponse, AjaxResponseBase, WorkflowBootstrapWorkflowDefinitionsQueryParams, void, void>
    verb="POST"
    path={`/api/services/SheshaWorkflow/Workflow/BootstrapWorkflowDefinitions`}
    {...props}
  />
);

export type UseWorkflowBootstrapWorkflowDefinitionsProps = Omit<
  UseMutateProps<StringAjaxResponse, AjaxResponseBase, WorkflowBootstrapWorkflowDefinitionsQueryParams, void, void>,
  'path' | 'verb'
>;

export const useWorkflowBootstrapWorkflowDefinitions = (props: UseWorkflowBootstrapWorkflowDefinitionsProps) =>
  useMutate<StringAjaxResponse, AjaxResponseBase, WorkflowBootstrapWorkflowDefinitionsQueryParams, void, void>(
    'POST',
    `/api/services/SheshaWorkflow/Workflow/BootstrapWorkflowDefinitions`,
    props
  );

export interface WorkflowBootstrapProcessConfigurationsQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type WorkflowBootstrapProcessConfigurationsProps = Omit<
  MutateProps<StringAjaxResponse, AjaxResponseBase, WorkflowBootstrapProcessConfigurationsQueryParams, void, void>,
  'path' | 'verb'
>;

export const WorkflowBootstrapProcessConfigurations = (props: WorkflowBootstrapProcessConfigurationsProps) => (
  <Mutate<StringAjaxResponse, AjaxResponseBase, WorkflowBootstrapProcessConfigurationsQueryParams, void, void>
    verb="POST"
    path={`/api/services/SheshaWorkflow/Workflow/BootstrapProcessConfigurations`}
    {...props}
  />
);

export type UseWorkflowBootstrapProcessConfigurationsProps = Omit<
  UseMutateProps<StringAjaxResponse, AjaxResponseBase, WorkflowBootstrapProcessConfigurationsQueryParams, void, void>,
  'path' | 'verb'
>;

export const useWorkflowBootstrapProcessConfigurations = (props: UseWorkflowBootstrapProcessConfigurationsProps) =>
  useMutate<StringAjaxResponse, AjaxResponseBase, WorkflowBootstrapProcessConfigurationsQueryParams, void, void>(
    'POST',
    `/api/services/SheshaWorkflow/Workflow/BootstrapProcessConfigurations`,
    props
  );

export interface WorkflowGetIncomingItemsQueryParams {
  latestInTop?: boolean;
  pageSize?: number;
  currentPage?: number;
  itemTypes?: ItemTypeFilterModel[] | null;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type WorkflowGetIncomingItemsProps = Omit<
  GetProps<InboxItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetIncomingItemsQueryParams, void>,
  'path'
>;

export const WorkflowGetIncomingItems = (props: WorkflowGetIncomingItemsProps) => (
  <Get<InboxItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetIncomingItemsQueryParams, void>
    path={`/api/services/SheshaWorkflow/Workflow/GetIncomingItems`}
    {...props}
  />
);

export type UseWorkflowGetIncomingItemsProps = Omit<
  UseGetProps<InboxItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetIncomingItemsQueryParams, void>,
  'path'
>;

export const useWorkflowGetIncomingItems = (props: UseWorkflowGetIncomingItemsProps) =>
  useGet<InboxItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetIncomingItemsQueryParams, void>(
    `/api/services/SheshaWorkflow/Workflow/GetIncomingItems`,
    props
  );

export interface WorkflowGetMyItemsQueryParams {
  latestInTop?: boolean;
  pageSize?: number;
  currentPage?: number;
  itemTypes?: ItemTypeFilterModel[] | null;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type WorkflowGetMyItemsProps = Omit<
  GetProps<MyItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetMyItemsQueryParams, void>,
  'path'
>;

export const WorkflowGetMyItems = (props: WorkflowGetMyItemsProps) => (
  <Get<MyItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetMyItemsQueryParams, void>
    path={`/api/services/SheshaWorkflow/Workflow/GetMyItems`}
    {...props}
  />
);

export type UseWorkflowGetMyItemsProps = Omit<
  UseGetProps<MyItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetMyItemsQueryParams, void>,
  'path'
>;

export const useWorkflowGetMyItems = (props: UseWorkflowGetMyItemsProps) =>
  useGet<MyItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetMyItemsQueryParams, void>(
    `/api/services/SheshaWorkflow/Workflow/GetMyItems`,
    props
  );

export interface WorkflowGetArchivedItemsQueryParams {
  latestInTop?: boolean;
  pageSize?: number;
  currentPage?: number;
  itemTypes?: ItemTypeFilterModel[] | null;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type WorkflowGetArchivedItemsProps = Omit<
  GetProps<ArchivedItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetArchivedItemsQueryParams, void>,
  'path'
>;

export const WorkflowGetArchivedItems = (props: WorkflowGetArchivedItemsProps) => (
  <Get<ArchivedItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetArchivedItemsQueryParams, void>
    path={`/api/services/SheshaWorkflow/Workflow/GetArchivedItems`}
    {...props}
  />
);

export type UseWorkflowGetArchivedItemsProps = Omit<
  UseGetProps<ArchivedItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetArchivedItemsQueryParams, void>,
  'path'
>;

export const useWorkflowGetArchivedItems = (props: UseWorkflowGetArchivedItemsProps) =>
  useGet<ArchivedItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetArchivedItemsQueryParams, void>(
    `/api/services/SheshaWorkflow/Workflow/GetArchivedItems`,
    props
  );

export interface WorkflowGetSentItemsQueryParams {
  latestInTop?: boolean;
  pageSize?: number;
  currentPage?: number;
  itemTypes?: ItemTypeFilterModel[] | null;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type WorkflowGetSentItemsProps = Omit<
  GetProps<SentItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetSentItemsQueryParams, void>,
  'path'
>;

export const WorkflowGetSentItems = (props: WorkflowGetSentItemsProps) => (
  <Get<SentItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetSentItemsQueryParams, void>
    path={`/api/services/SheshaWorkflow/Workflow/GetSentItems`}
    {...props}
  />
);

export type UseWorkflowGetSentItemsProps = Omit<
  UseGetProps<SentItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetSentItemsQueryParams, void>,
  'path'
>;

export const useWorkflowGetSentItems = (props: UseWorkflowGetSentItemsProps) =>
  useGet<SentItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetSentItemsQueryParams, void>(
    `/api/services/SheshaWorkflow/Workflow/GetSentItems`,
    props
  );

export interface WorkflowGetDraftItemsQueryParams {
  latestInTop?: boolean;
  pageSize?: number;
  currentPage?: number;
  itemTypes?: ItemTypeFilterModel[] | null;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type WorkflowGetDraftItemsProps = Omit<
  GetProps<DraftItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetDraftItemsQueryParams, void>,
  'path'
>;

export const WorkflowGetDraftItems = (props: WorkflowGetDraftItemsProps) => (
  <Get<DraftItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetDraftItemsQueryParams, void>
    path={`/api/services/SheshaWorkflow/Workflow/GetDraftItems`}
    {...props}
  />
);

export type UseWorkflowGetDraftItemsProps = Omit<
  UseGetProps<DraftItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetDraftItemsQueryParams, void>,
  'path'
>;

export const useWorkflowGetDraftItems = (props: UseWorkflowGetDraftItemsProps) =>
  useGet<DraftItemsResponseAjaxResponse, AjaxResponseBase, WorkflowGetDraftItemsQueryParams, void>(
    `/api/services/SheshaWorkflow/Workflow/GetDraftItems`,
    props
  );

export interface WorkflowPastTimeLineQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export interface WorkflowPastTimeLinePathParams {
  id: string;
}

export type WorkflowPastTimeLineProps = Omit<
  GetProps<
    WorkflowExecutionLogResponseAjaxResponse,
    AjaxResponseBase,
    WorkflowPastTimeLineQueryParams,
    WorkflowPastTimeLinePathParams
  >,
  'path'
> &
  WorkflowPastTimeLinePathParams;

export const WorkflowPastTimeLine = ({ id, ...props }: WorkflowPastTimeLineProps) => (
  <Get<
    WorkflowExecutionLogResponseAjaxResponse,
    AjaxResponseBase,
    WorkflowPastTimeLineQueryParams,
    WorkflowPastTimeLinePathParams
  >
    path={`/api/services/SheshaWorkflow/Workflow/${id}/PastTimeLine`}
    {...props}
  />
);

export type UseWorkflowPastTimeLineProps = Omit<
  UseGetProps<
    WorkflowExecutionLogResponseAjaxResponse,
    AjaxResponseBase,
    WorkflowPastTimeLineQueryParams,
    WorkflowPastTimeLinePathParams
  >,
  'path'
> &
  WorkflowPastTimeLinePathParams;

export const useWorkflowPastTimeLine = ({ id, ...props }: UseWorkflowPastTimeLineProps) =>
  useGet<
    WorkflowExecutionLogResponseAjaxResponse,
    AjaxResponseBase,
    WorkflowPastTimeLineQueryParams,
    WorkflowPastTimeLinePathParams
  >(
    (paramsInPath: WorkflowPastTimeLinePathParams) =>
      `/api/services/SheshaWorkflow/Workflow/${paramsInPath.id}/PastTimeLine`,
    { pathParams: { id }, ...props }
  );
