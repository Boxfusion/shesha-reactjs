/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';
export const SPEC_VERSION = 'v1';
export interface CreateShaRoleDto {
  name: string;
  nameSpace?: string | null;
  description?: string | null;
  canAssignToMultiple?: boolean;
  canAssignToPerson?: boolean;
  canAssignToRole?: boolean;
  canAssignToOrganisationRoleLevel?: boolean;
  canAssignToUnit?: boolean;
}

export interface ShaRoleDto {
  id?: string;
  name: string;
  nameSpace?: string | null;
  description?: string | null;
  isRegionSpecific?: boolean;
  canAssignToMultiple?: boolean;
  canAssignToPerson?: boolean;
  canAssignToRole?: boolean;
  canAssignToOrganisationRoleLevel?: boolean;
  canAssignToUnit?: boolean;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface ShaRoleDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: ShaRoleDto;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface ShaRoleDtoPagedResultDto {
  items?: ShaRoleDto[] | null;
  totalCount?: number;
}

export interface ShaRoleDtoPagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: ShaRoleDtoPagedResultDto;
}

export interface ShaRoleCreateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ShaRoleCreateProps = Omit<
  MutateProps<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleCreateQueryParams, CreateShaRoleDto, void>,
  'path' | 'verb'
>;

export const ShaRoleCreate = (props: ShaRoleCreateProps) => (
  <Mutate<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleCreateQueryParams, CreateShaRoleDto, void>
    verb="POST"
    path={`/api/services/app/ShaRole/Create`}
    {...props}
  />
);

export type UseShaRoleCreateProps = Omit<
  UseMutateProps<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleCreateQueryParams, CreateShaRoleDto, void>,
  'path' | 'verb'
>;

export const useShaRoleCreate = (props: UseShaRoleCreateProps) =>
  useMutate<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleCreateQueryParams, CreateShaRoleDto, void>(
    'POST',
    `/api/services/app/ShaRole/Create`,
    props
  );

export interface ShaRoleUpdateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ShaRoleUpdateProps = Omit<
  MutateProps<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleUpdateQueryParams, ShaRoleDto, void>,
  'path' | 'verb'
>;

export const ShaRoleUpdate = (props: ShaRoleUpdateProps) => (
  <Mutate<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleUpdateQueryParams, ShaRoleDto, void>
    verb="PUT"
    path={`/api/services/app/ShaRole/Update`}
    {...props}
  />
);

export type UseShaRoleUpdateProps = Omit<
  UseMutateProps<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleUpdateQueryParams, ShaRoleDto, void>,
  'path' | 'verb'
>;

export const useShaRoleUpdate = (props: UseShaRoleUpdateProps) =>
  useMutate<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleUpdateQueryParams, ShaRoleDto, void>(
    'PUT',
    `/api/services/app/ShaRole/Update`,
    props
  );

export interface ShaRoleDeleteQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ShaRoleDeleteProps = Omit<
  MutateProps<void, unknown, ShaRoleDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const ShaRoleDelete = (props: ShaRoleDeleteProps) => (
  <Mutate<void, unknown, ShaRoleDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/app/ShaRole/Delete`}
    {...props}
  />
);

export type UseShaRoleDeleteProps = Omit<
  UseMutateProps<void, unknown, ShaRoleDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const useShaRoleDelete = (props: UseShaRoleDeleteProps) =>
  useMutate<void, unknown, ShaRoleDeleteQueryParams, void, void>('DELETE', `/api/services/app/ShaRole/Delete`, {
    ...props,
  });

export interface ShaRoleGetQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ShaRoleGetProps = Omit<
  GetProps<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleGetQueryParams, void>,
  'path'
>;

export const ShaRoleGet = (props: ShaRoleGetProps) => (
  <Get<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleGetQueryParams, void>
    path={`/api/services/app/ShaRole/Get`}
    {...props}
  />
);

export type UseShaRoleGetProps = Omit<
  UseGetProps<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleGetQueryParams, void>,
  'path'
>;

export const useShaRoleGet = (props: UseShaRoleGetProps) =>
  useGet<ShaRoleDtoAjaxResponse, AjaxResponseBase, ShaRoleGetQueryParams, void>(`/api/services/app/ShaRole/Get`, props);

export interface ShaRoleGetAllQueryParams {
  keyword?: string | null;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ShaRoleGetAllProps = Omit<
  GetProps<ShaRoleDtoPagedResultDtoAjaxResponse, AjaxResponseBase, ShaRoleGetAllQueryParams, void>,
  'path'
>;

export const ShaRoleGetAll = (props: ShaRoleGetAllProps) => (
  <Get<ShaRoleDtoPagedResultDtoAjaxResponse, AjaxResponseBase, ShaRoleGetAllQueryParams, void>
    path={`/api/services/app/ShaRole/GetAll`}
    {...props}
  />
);

export type UseShaRoleGetAllProps = Omit<
  UseGetProps<ShaRoleDtoPagedResultDtoAjaxResponse, AjaxResponseBase, ShaRoleGetAllQueryParams, void>,
  'path'
>;

export const useShaRoleGetAll = (props: UseShaRoleGetAllProps) =>
  useGet<ShaRoleDtoPagedResultDtoAjaxResponse, AjaxResponseBase, ShaRoleGetAllQueryParams, void>(
    `/api/services/app/ShaRole/GetAll`,
    props
  );
