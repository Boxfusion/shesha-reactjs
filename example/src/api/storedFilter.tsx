/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';
export const SPEC_VERSION = 'v1';
export interface EntityLinkDto {
  entityId?: string | null;
  entityType?: string | null;
}

export type RefListFilterExpressionType = 1 | 2 | 3 | 4 | 5;

export type RefListFilterComparerType = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;

export interface StoredFilterDto {
  id?: string;
  creationTime?: string;
  creatorUserId?: number | null;
  lastModificationTime?: string | null;
  lastModifierUserId?: number | null;
  isDeleted?: boolean;
  deleterUserId?: number | null;
  deletionTime?: string | null;
  containerEntities?: EntityLinkDto[] | null;
  name: string;
  namespace: string;
  description?: string | null;
  expressionType?: RefListFilterExpressionType;
  expression?: string | null;
  columnName?: string | null;
  columnFilterComparerType?: RefListFilterComparerType;
  columnFilterValue?: string | null;
  columnDoNotApplyValue?: boolean;
  visibleBy?: EntityLinkDto[] | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface StoredFilterDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: StoredFilterDto;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface StoredFilterDtoPagedResultDto {
  items?: StoredFilterDto[] | null;
  totalCount?: number;
}

export interface StoredFilterDtoPagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: StoredFilterDtoPagedResultDto;
}

export interface CreateStoredFilterDto {
  id?: string;
  containerEntities?: EntityLinkDto[] | null;
  name: string;
  namespace: string;
  description?: string | null;
  filterExpressionType?: RefListFilterExpressionType;
  expressionType?: RefListFilterExpressionType;
  expression?: string | null;
  columnName?: string | null;
  columnFilterComparerType?: RefListFilterComparerType;
  columnFilterValue?: string | null;
  columnDoNotApplyValue?: boolean;
  visibleBy?: EntityLinkDto[] | null;
}

export interface UpdateStoredFilterDto {
  id?: string;
  containerEntities?: EntityLinkDto[] | null;
  name: string;
  namespace: string;
  description?: string | null;
  filterExpressionType?: RefListFilterExpressionType;
  expressionType?: RefListFilterExpressionType;
  expression?: string | null;
  columnName?: string | null;
  columnFilterComparerType?: RefListFilterComparerType;
  columnFilterValue?: string | null;
  columnDoNotApplyValue?: boolean;
  visibleBy?: EntityLinkDto[] | null;
}

export interface StoredFilterGetQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type StoredFilterGetProps = Omit<
  GetProps<StoredFilterDtoAjaxResponse, AjaxResponseBase, StoredFilterGetQueryParams, void>,
  'path'
>;

export const StoredFilterGet = (props: StoredFilterGetProps) => (
  <Get<StoredFilterDtoAjaxResponse, AjaxResponseBase, StoredFilterGetQueryParams, void>
    path={`/api/services/app/StoredFilter/Get`}
    {...props}
  />
);

export type UseStoredFilterGetProps = Omit<
  UseGetProps<StoredFilterDtoAjaxResponse, AjaxResponseBase, StoredFilterGetQueryParams, void>,
  'path'
>;

export const useStoredFilterGet = (props: UseStoredFilterGetProps) =>
  useGet<StoredFilterDtoAjaxResponse, AjaxResponseBase, StoredFilterGetQueryParams, void>(
    `/api/services/app/StoredFilter/Get`,
    props
  );

export interface StoredFilterGetAllQueryParams {
  ownerId?: string | null;
  ownerType?: string | null;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type StoredFilterGetAllProps = Omit<
  GetProps<StoredFilterDtoPagedResultDtoAjaxResponse, AjaxResponseBase, StoredFilterGetAllQueryParams, void>,
  'path'
>;

export const StoredFilterGetAll = (props: StoredFilterGetAllProps) => (
  <Get<StoredFilterDtoPagedResultDtoAjaxResponse, AjaxResponseBase, StoredFilterGetAllQueryParams, void>
    path={`/api/services/app/StoredFilter/GetAll`}
    {...props}
  />
);

export type UseStoredFilterGetAllProps = Omit<
  UseGetProps<StoredFilterDtoPagedResultDtoAjaxResponse, AjaxResponseBase, StoredFilterGetAllQueryParams, void>,
  'path'
>;

export const useStoredFilterGetAll = (props: UseStoredFilterGetAllProps) =>
  useGet<StoredFilterDtoPagedResultDtoAjaxResponse, AjaxResponseBase, StoredFilterGetAllQueryParams, void>(
    `/api/services/app/StoredFilter/GetAll`,
    props
  );

export interface StoredFilterCreateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type StoredFilterCreateProps = Omit<
  MutateProps<
    StoredFilterDtoAjaxResponse,
    AjaxResponseBase,
    StoredFilterCreateQueryParams,
    CreateStoredFilterDto,
    void
  >,
  'path' | 'verb'
>;

export const StoredFilterCreate = (props: StoredFilterCreateProps) => (
  <Mutate<StoredFilterDtoAjaxResponse, AjaxResponseBase, StoredFilterCreateQueryParams, CreateStoredFilterDto, void>
    verb="POST"
    path={`/api/services/app/StoredFilter/Create`}
    {...props}
  />
);

export type UseStoredFilterCreateProps = Omit<
  UseMutateProps<
    StoredFilterDtoAjaxResponse,
    AjaxResponseBase,
    StoredFilterCreateQueryParams,
    CreateStoredFilterDto,
    void
  >,
  'path' | 'verb'
>;

export const useStoredFilterCreate = (props: UseStoredFilterCreateProps) =>
  useMutate<StoredFilterDtoAjaxResponse, AjaxResponseBase, StoredFilterCreateQueryParams, CreateStoredFilterDto, void>(
    'POST',
    `/api/services/app/StoredFilter/Create`,
    props
  );

export interface StoredFilterUpdateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type StoredFilterUpdateProps = Omit<
  MutateProps<
    StoredFilterDtoAjaxResponse,
    AjaxResponseBase,
    StoredFilterUpdateQueryParams,
    UpdateStoredFilterDto,
    void
  >,
  'path' | 'verb'
>;

export const StoredFilterUpdate = (props: StoredFilterUpdateProps) => (
  <Mutate<StoredFilterDtoAjaxResponse, AjaxResponseBase, StoredFilterUpdateQueryParams, UpdateStoredFilterDto, void>
    verb="PUT"
    path={`/api/services/app/StoredFilter/Update`}
    {...props}
  />
);

export type UseStoredFilterUpdateProps = Omit<
  UseMutateProps<
    StoredFilterDtoAjaxResponse,
    AjaxResponseBase,
    StoredFilterUpdateQueryParams,
    UpdateStoredFilterDto,
    void
  >,
  'path' | 'verb'
>;

export const useStoredFilterUpdate = (props: UseStoredFilterUpdateProps) =>
  useMutate<StoredFilterDtoAjaxResponse, AjaxResponseBase, StoredFilterUpdateQueryParams, UpdateStoredFilterDto, void>(
    'PUT',
    `/api/services/app/StoredFilter/Update`,
    props
  );

export interface StoredFilterDeleteQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type StoredFilterDeleteProps = Omit<
  MutateProps<void, unknown, StoredFilterDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const StoredFilterDelete = (props: StoredFilterDeleteProps) => (
  <Mutate<void, unknown, StoredFilterDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/app/StoredFilter/Delete`}
    {...props}
  />
);

export type UseStoredFilterDeleteProps = Omit<
  UseMutateProps<void, unknown, StoredFilterDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const useStoredFilterDelete = (props: UseStoredFilterDeleteProps) =>
  useMutate<void, unknown, StoredFilterDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/app/StoredFilter/Delete`,
    { ...props }
  );
