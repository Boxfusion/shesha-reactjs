/* Generated by restful-react */

import React from 'react';
import { Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';
export const SPEC_VERSION = 'v1';
export interface ColumnSortingDto {
  id?: string | null;
  desc?: boolean;
}

export interface ColumnFilterDto {
  columnId?: string | null;
  propertyName?: string | null;
  filterOption?: string | null;
  filter?: {} | null;
  realPropertyName?: string | null;
}

export interface SelectedStoredFilterDto {
  id?: string | null;
  name?: string | null;
  expressionType?: string | null;
  expression?: {} | null;
}

export interface DataTableGetDataInput {
  id?: string | null;
  uid?: string | null;
  entityType?: string | null;
  pageSize?: number;
  quickSearch?: string | null;
  currentPage?: number;
  parentEntityId?: string | null;
  sorting?: ColumnSortingDto[] | null;
  filter?: ColumnFilterDto[] | null;
  selectedStoredFilterIds?: string[] | null;
  selectedFilters?: SelectedStoredFilterDto[] | null;
  properties?: string[] | null;
}

export interface DataTableData {
  totalRows?: number;
  totalRowsBeforeFilter?: number;
  totalPages?: number;
  echo?: number;
  rows?: { [key: string]: any }[] | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface DataTableDataAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: DataTableData;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface EntityHistoryGetDataQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type EntityHistoryGetDataProps = Omit<
  MutateProps<
    DataTableDataAjaxResponse,
    AjaxResponseBase,
    EntityHistoryGetDataQueryParams,
    DataTableGetDataInput,
    void
  >,
  'path' | 'verb'
>;

export const EntityHistoryGetData = (props: EntityHistoryGetDataProps) => (
  <Mutate<DataTableDataAjaxResponse, AjaxResponseBase, EntityHistoryGetDataQueryParams, DataTableGetDataInput, void>
    verb="POST"
    path={`/api/services/app/EntityHistory/GetData`}
    {...props}
  />
);

export type UseEntityHistoryGetDataProps = Omit<
  UseMutateProps<
    DataTableDataAjaxResponse,
    AjaxResponseBase,
    EntityHistoryGetDataQueryParams,
    DataTableGetDataInput,
    void
  >,
  'path' | 'verb'
>;

export const useEntityHistoryGetData = (props: UseEntityHistoryGetDataProps) =>
  useMutate<DataTableDataAjaxResponse, AjaxResponseBase, EntityHistoryGetDataQueryParams, DataTableGetDataInput, void>(
    'POST',
    `/api/services/app/EntityHistory/GetData`,
    props
  );
